// backend/src/services/scheduling/auto-generation.service.js
const cron = require('node-cron');
const db = require('../../models');
const {SystemSettings, WorkSite, Schedule, Sequelize} = db;
const cpSatBridge = require('./cp-sat-bridge.service');

class AutoGenerationService {
    constructor() {
        this.job = null;
        this.initializeAutoGeneration();
    }

    async initializeAutoGeneration() {
        try {
            // Check if auto-generation is enabled and get settings
            const settings = await this.getAutoGenerationSettings();

            if (settings.enabled) {
                this.scheduleAutoGeneration(settings.day, settings.time);
            }
        } catch (error) {
            console.error('Failed to initialize auto-generation:', error);
        }
    }

    async getAutoGenerationSettings() {
        try {
            const [enabledSetting, daySetting, timeSetting] = await Promise.all([
                SystemSettings.findOne({where: {setting_key: 'autoGenerateSchedule'}}),
                SystemSettings.findOne({where: {setting_key: 'autoGenerateDay'}}),
                SystemSettings.findOne({where: {setting_key: 'autoGenerateTime'}}),
            ]);

            return {
                enabled: enabledSetting ? JSON.parse(enabledSetting.setting_value) : false,
                day: daySetting ? parseInt(daySetting.setting_value) : 0, // Sunday
                time: timeSetting ? timeSetting.setting_value : '06:00',
            };
        } catch (error) {
            console.error('Error fetching auto-generation settings:', error);
            return {enabled: false, day: 0, time: '06:00'};
        }
    }

    scheduleAutoGeneration(dayOfWeek, time) {
        // Stop existing job if any
        if (this.job) {
            this.job.destroy();
        }

        // Parse time (HH:MM format)
        const [hour, minute] = time.split(':').map(Number);

        // Create cron expression: minute hour * * dayOfWeek
        const cronExpression = `${minute} ${hour} * * ${dayOfWeek}`;

        console.log(`Scheduling auto-generation for day ${dayOfWeek} at ${time} (cron: ${cronExpression})`);

        this.job = cron.schedule(cronExpression, async () => {
            console.log('Running auto-generation...');
            await this.performAutoGeneration();
        }, {
            scheduled: true,
            timezone: 'UTC',
        });
    }

    async performAutoGeneration() {
        try {
            console.log('Starting automatic schedule generation...');

            // Get all work sites
            const workSites = await WorkSite.findAll({
                attributes: ['site_id'],
            });

            let generatedCount = 0;

            for (const site of workSites) {
                try {
                    // Calculate next week's start date
                    const today = new Date();
                    const daysUntilNextWeek = 7 - today.getDay();
                    const nextWeekStart = new Date(today);
                    nextWeekStart.setDate(today.getDate() + daysUntilNextWeek);

                    // Check if schedule already exists for next week
                    const existingSchedule = await Schedule.findOne({
                        where: {
                            site_id: site.site_id,
                            start_date: {
                                [Sequelize.Op.gte]: nextWeekStart,
                                [Sequelize.Op.lt]: new Date(nextWeekStart.getTime() + 7 * 24 * 60 * 60 * 1000),
                            },
                        },
                    });

                    if (existingSchedule) {
                        console.log(`Schedule already exists for site ${site.site_id} for next week`);
                        continue;
                    }

                    // Get optimization settings
                    const settings = await this.getOptimizationSettings();

                    // Generate schedule using CP-SAT bridge
                    const result = await cpSatBridge.generateOptimalSchedule(site.site_id, nextWeekStart.toISOString().split('T')[0]);

                    if (result.success) {
                        generatedCount++;
                        console.log(`Auto-generated schedule for site ${site.site_id}`);
                    }

                } catch (error) {
                    console.error(`Failed to auto-generate schedule for site ${site.site_id}:`, error);
                }
            }

            console.log(`Auto-generation completed. Generated ${generatedCount} schedules.`);

        } catch (error) {
            console.error('Error in automatic schedule generation:', error);
        }
    }

    async getOptimizationSettings() {
        try {
            const [modeSetting, fairnessSetting] = await Promise.all([
                SystemSettings.findOne({where: {setting_key: 'optimizationMode'}}),
                SystemSettings.findOne({where: {setting_key: 'fairnessWeight'}}),
            ]);

            return {
                optimizationMode: modeSetting ? modeSetting.setting_value : 'balanced',
                fairnessWeight: fairnessSetting ? parseInt(fairnessSetting.setting_value) : 50,
            };
        } catch (error) {
            console.error('Error fetching optimization settings:', error);
            return {optimizationMode: 'balanced', fairnessWeight: 50};
        }
    }

    async updateSchedule() {
        // Re-initialize when settings change
        await this.initializeAutoGeneration();
    }

    stop() {
        if (this.job) {
            this.job.destroy();
            this.job = null;
        }
    }
}

module.exports = AutoGenerationService;
