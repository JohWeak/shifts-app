// backend/src/controllers/system-settings.controller.js
const db = require('../../models');
const {SystemSettings} = db;
const autoGenerationService = require('../../services/scheduling/auto-generation.service');

const getSystemSettings = async (req, res) => {
    let storedSettings;
    try {
        const {site_id} = req.query;

        // Build where clause for filtering by site
        const whereClause = {};

        if (site_id) {
            // Get settings for specific site, plus global settings (site_id = null) as fallback
            if (req.accessibleSites && req.accessibleSites !== 'all' && req.accessibleSites.length > 0) {
                // Limited admin - check access to requested site
                if (!req.accessibleSites.includes(parseInt(site_id))) {
                    return res.status(403).json({
                        success: false,
                        message: 'Access denied to this work site'
                    });
                }
            }

            // Get both site-specific and global settings
            const [siteSettings, globalSettings] = await Promise.all([
                SystemSettings.findAll({where: {site_id: site_id}}),
                SystemSettings.findAll({where: {site_id: null}})
            ]);

            // Merge settings with site-specific taking priority
            storedSettings = [...globalSettings];
            siteSettings.forEach(siteSetting => {
                const index = storedSettings.findIndex(s => s.setting_key === siteSetting.setting_key);
                if (index >= 0) {
                    storedSettings[index] = siteSetting;
                } else {
                    storedSettings.push(siteSetting);
                }
            });
        } else {
            // Get global settings only
            whereClause.site_id = null;
            storedSettings = await SystemSettings.findAll({where: whereClause});
        }

        // Convert to key-value object
        const settingsObj = {};
        storedSettings.forEach(setting => {
            let value = setting.setting_value;

            // Parse based on type
            switch (setting.setting_type) {
                case 'number':
                    value = parseFloat(value);
                    break;
                case 'boolean':
                    value = value === 'true';
                    break;
                case 'json':
                    try {
                        value = JSON.parse(value);
                    } catch (e) {
                        console.warn(`Failed to parse JSON setting ${setting.setting_key}:`, e);
                    }
                    break;
                default:
                    // string type - keep as is
                    break;
            }

            settingsObj[setting.setting_key] = value;
        });

        // Default values if not set
        const defaultSettings = {
            weekStartDay: 1,
            dateFormat: 'DD/MM/YYYY',
            timeFormat: '24h',
            autoGenerateSchedule: false,
            autoGenerateDay: 0,
            autoGenerateTime: '06:00',
            minRestBetweenShifts: 11,
            maxConsecutiveDays: 6,
            optimizationMode: 'balanced',
            fairnessWeight: 50,
            maxCannotWorkDays: 2,
            maxPreferWorkDays: 3,
            strictLegalCompliance: true,
            notifySchedulePublished: true,
        };

        // Merge defaults with stored settings
        const finalSettings = {...defaultSettings, ...settingsObj};

        res.json({
            success: true,
            data: finalSettings,
        });
    } catch (error) {
        console.error('Error fetching system settings:', error);
        res.status(500).json({
            success: false,
            message: 'Error fetching system settings',
            error: error.message,
        });
    }
};

const updateSystemSettings = async (req, res) => {
    try {
        const settings = req.body;
        const {site_id} = req.query;

        // Check Work Site access for limited admins
        if (site_id && req.accessibleSites && req.accessibleSites !== 'all' && req.accessibleSites.length > 0) {
            if (!req.accessibleSites.includes(parseInt(site_id))) {
                return res.status(403).json({
                    success: false,
                    message: 'Access denied to this work site'
                });
            }
        }

        // Define setting types
        const settingTypes = {
            weekStartDay: 'number',
            dateFormat: 'string',
            timeFormat: 'string',
            autoGenerateSchedule: 'boolean',
            autoGenerateDay: 'number',
            autoGenerateTime: 'string',
            minRestBetweenShifts: 'number',
            maxConsecutiveDays: 'number',
            optimizationMode: 'string',
            fairnessWeight: 'number',
            maxCannotWorkDays: 'number',
            maxPreferWorkDays: 'number',
            strictLegalCompliance: 'boolean',
            notifySchedulePublished: 'boolean',
        };

        // Save or update each setting
        for (const [key, value] of Object.entries(settings)) {
            if (settingTypes[key]) {
                let stringValue = value;
                if (settingTypes[key] === 'json') {
                    stringValue = JSON.stringify(value);
                } else {
                    stringValue = String(value);
                }

                await SystemSettings.upsert({
                    setting_key: key,
                    setting_value: stringValue,
                    setting_type: settingTypes[key],
                    description: `System setting: ${key}`,
                    is_editable: !['minRestBetweenShifts', 'strictLegalCompliance'].includes(key), // Some settings cannot be changed due to legislation
                    site_id: site_id || null, // Global settings if no site_id provided
                }, {
                    // Upsert based on composite key
                    where: {
                        setting_key: key,
                        site_id: site_id || null
                    }
                });
            }
        }

        // Update auto-generation schedule if auto-generation settings changed
        if (settings.autoGenerateSchedule !== undefined ||
            settings.autoGenerateDay !== undefined ||
            settings.autoGenerateTime !== undefined) {
            try {
                await autoGenerationService.updateSchedule();
                console.log('Auto-generation schedule updated');
            } catch (error) {
                console.error('Failed to update auto-generation schedule:', error);
            }
        }

        res.json({
            success: true,
            message: 'Settings updated successfully',
        });
    } catch (error) {
        console.error('Error updating system settings:', error);
        res.status(500).json({
            success: false,
            message: 'Error updating settings',
            error: error.message,
        });
    }
};

module.exports = {
    getSystemSettings,
    updateSystemSettings,
};